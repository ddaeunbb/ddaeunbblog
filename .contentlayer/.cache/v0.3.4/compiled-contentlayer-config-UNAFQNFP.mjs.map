{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import remarkBreaks from 'remark-breaks';\nimport GithubSlugger from 'github-slugger';\nimport rehypePrettyCode from 'rehype-pretty-code';\nimport readingTime from 'reading-time';\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n\tslug: {\n\t\ttype: 'string',\n\t\tresolve: doc => `/${doc._raw.flattenedPath}`,\n\t},\n\tslugAsParams: {\n\t\ttype: 'string',\n\t\tresolve: doc => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n\t},\n\treadingTime: {\n\t\ttype: 'json',\n\t\tresolve: doc => readingTime(doc.body.raw),\n\t},\n\theadings: {\n\t\ttype: 'json',\n\t\tresolve: async doc => {\n\t\t\tconst regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n\t\t\tconst slugger = new GithubSlugger();\n\t\t\tconst headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n\t\t\t\t({ groups }) => {\n\t\t\t\t\tconst flag = groups?.flag;\n\t\t\t\t\tconst content = groups?.content;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlevel: flag.length,\n\t\t\t\t\t\ttext: content,\n\t\t\t\t\t\tslug: content ? slugger.slug(content) : undefined,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn headings;\n\t\t},\n\t},\n};\n\nconst fields = {\n\ttitle: {\n\t\ttype: 'string',\n\t\trequired: true,\n\t},\n\tcategory: {\n\t\ttype: 'string',\n\t\trequired: true,\n\t},\n\tdate: {\n\t\ttype: 'date',\n\t\trequired: true,\n\t},\n\ttags: {\n\t\ttype: 'list',\n\t\tof: { type: 'string' },\n\t},\n\tfeatured: {\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t},\n};\n\nexport const Log = defineDocumentType(() => ({\n\tname: 'Log',\n\tfilePathPattern: `log/**/*.mdx`,\n\tcontentType: 'mdx',\n\tfields: fields,\n\tcomputedFields,\n}));\n\nexport const Articles = defineDocumentType(() => ({\n\tname: 'Articles',\n\tfilePathPattern: `articles/**/*.mdx`,\n\tcontentType: 'mdx',\n\tfields: fields,\n\tcomputedFields,\n}));\n\nexport default makeSource({\n\tcontentDirPath: './content',\n\tdocumentTypes: [Log, Articles],\n\tmdx: {\n\t\tremarkPlugins: [remarkGfm, remarkBreaks],\n\t\trehypePlugins: [\n\t\t\trehypeSlug,\n\t\t\t[\n\t\t\t\trehypePrettyCode,\n\t\t\t\t{\n\t\t\t\t\ttheme: 'github-dark',\n\t\t\t\t\tonVisitLine(node) {\n\t\t\t\t\t\t// Prevent lines from collapsing in `display: grid` mode, and allow empty\n\t\t\t\t\t\t// lines to be copy/pasted\n\t\t\t\t\t\tif (node.children.length === 0) {\n\t\t\t\t\t\t\tnode.children = [{ type: 'text', value: ' ' }];\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonVisitHighlightedLine(node) {\n\t\t\t\t\t\tnode.properties.className.push('line--highlighted');\n\t\t\t\t\t},\n\t\t\t\t\tonVisitHighlightedWord(node) {\n\t\t\t\t\t\tnode.properties.className = ['word--highlighted'];\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t[\n\t\t\t\trehypeAutolinkHeadings,\n\t\t\t\t{\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tclassName: ['anchor'],\n\t\t\t\t\t\tariaLabel: 'anchor',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t},\n});\n"],
  "mappings": ";AAAA,OAAO,kBAAkB;AACzB,OAAO,mBAAmB;AAC1B,OAAO,sBAAsB;AAC7B,OAAO,iBAAiB;AACxB,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAGtB,IAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,MAAM;AAAA,IACN,SAAS,SAAO,IAAI,IAAI,KAAK,aAAa;AAAA,EAC3C;AAAA,EACA,cAAc;AAAA,IACb,MAAM;AAAA,IACN,SAAS,SAAO,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACpE;AAAA,EACA,aAAa;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,SAAO,YAAY,IAAI,KAAK,GAAG;AAAA,EACzC;AAAA,EACA,UAAU;AAAA,IACT,MAAM;AAAA,IACN,SAAS,OAAM,QAAO;AACrB,YAAM,aAAa;AACnB,YAAM,UAAU,IAAI,cAAc;AAClC,YAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,QAC9D,CAAC,EAAE,OAAO,MAAM;AACf,gBAAM,OAAO,QAAQ;AACrB,gBAAM,UAAU,QAAQ;AACxB,iBAAO;AAAA,YACN,OAAO,KAAK;AAAA,YACZ,MAAM;AAAA,YACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,UACzC;AAAA,QACD;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AACD;AAEA,IAAM,SAAS;AAAA,EACd,OAAO;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACT,MAAM;AAAA,IACN,UAAU;AAAA,EACX;AAAA,EACA,MAAM;AAAA,IACL,MAAM;AAAA,IACN,UAAU;AAAA,EACX;AAAA,EACA,MAAM;AAAA,IACL,MAAM;AAAA,IACN,IAAI,EAAE,MAAM,SAAS;AAAA,EACtB;AAAA,EACA,UAAU;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,EACV;AACD;AAEO,IAAM,MAAM,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb;AAAA,EACA;AACD,EAAE;AAEK,IAAM,WAAW,mBAAmB,OAAO;AAAA,EACjD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb;AAAA,EACA;AACD,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACzB,gBAAgB;AAAA,EAChB,eAAe,CAAC,KAAK,QAAQ;AAAA,EAC7B,KAAK;AAAA,IACJ,eAAe,CAAC,WAAW,YAAY;AAAA,IACvC,eAAe;AAAA,MACd;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,UACC,OAAO;AAAA,UACP,YAAY,MAAM;AAGjB,gBAAI,KAAK,SAAS,WAAW,GAAG;AAC/B,mBAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,YAC9C;AAAA,UACD;AAAA,UACA,uBAAuB,MAAM;AAC5B,iBAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,UACnD;AAAA,UACA,uBAAuB,MAAM;AAC5B,iBAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,UACjD;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,UACC,YAAY;AAAA,YACX,WAAW,CAAC,QAAQ;AAAA,YACpB,WAAW;AAAA,UACZ;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD,CAAC;",
  "names": []
}
